
@online{nystrom_design,
	title = {Design Patterns Revisited · Game Programming Patterns},
	url = {http://gameprogrammingpatterns.com/design-patterns-revisited.html},
	titleaddon = {Game Programming Patterns},
	author = {Nystrom, Bob},
	urldate = {2016-02-21},
	file = {Design Patterns Revisited · Game Programming Patterns:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/NVSUWJ22/design-patterns-revisited.html:text/html}
}

@book{beizer_software_2003,
  title = {Software {{Testing Techniques}}},
  isbn = {978-81-7722-260-9},
  abstract = {Software Testing Techniques, 2nd Edition is the first book-length work that explicitly addresses the idea that design for testability is as important as testing itself not just by saying that testability is a desirable goal, but by showing the reader how it to do it. Every chapter has testability guidelines that illustrate how the technique discussed in the chapter can be used to make software more easily tested and therefore more reliable and maintainable. Application of all techniques to unit, integration, maintenance, and system testing are discussed throughout this book.As a self-study text, as a classroom text, as a working reference, it is a book that no programmer, independent software tester, software engineer, testing theorist, system designer, or software project manager can be without.},
  pagetotal = {572},
  timestamp = {2016-02-24T19:48:14Z},
  langid = {english},
  publisher = {{Dreamtech}},
  author = {Beizer, Boris},
  date = {2003}
}

@online{_mvp_2014,
  title = {{{MVP}} for {{Android}}: how to organize the presentation layer},
  url = {http://antonioleiva.com/mvp-android/},
  shorttitle = {{{MVP}} for {{Android}}},
  abstract = {MVP (Model-View-Presenter) is a software design pattern that works pretty well in Android projects and helps separate presentation layer from domain.},
  timestamp = {2016-02-24T19:37:57Z},
  titleaddon = {Antonio Leiva},
  urldate = {2016-02-24},
  year = {2014-04-15T15:19:55+00:00},
  file = {Snapshot:C\:\\Users\\Anthony\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\t1qm22zo.default\\zotero\\storage\\A4A4ITK5\\mvp-android.html:}
}

@online{_techniques_fault_tolerance,
  title = {Techniques for {{Fault Tolerance}} in {{Software}}},
  url = {http://srel.ee.duke.edu/sw_ft/node5.html},
  timestamp = {2016-02-24T19:54:08Z},
  urldate = {2016-02-24},
  file = {Techniques for Fault Tolerance in Software:C\:\\Users\\Anthony\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\t1qm22zo.default\\zotero\\storage\\MIEI2P7I\\node5.html:}
}

@online{android_samsung,
  title = {icechen1/androidcompat},
  url = {https://github.com/icechen1/androidcompat},
  abstract = {androidcompat - Aggregate of various OEM specific bugs in Android},
  timestamp = {2016-02-24T19:40:12Z},
  titleaddon = {GitHub},
  urldate = {2016-02-24},
  file = {Snapshot:C\:\\Users\\Anthony\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\t1qm22zo.default\\zotero\\storage\\P9I4U5X6\\androidcompat.html:}
}

@online{_accu_,
  title = {{{ACCU}} :: {{The Philosophy}} of {{Extensible Software}}},
  url = {http://accu.org/index.php/journals/391},
  timestamp = {2016-02-24T19:55:37Z},
  urldate = {2016-02-24},
  file = {ACCU \:\: The Philosophy of Extensible Software:C\:\\Users\\Anthony\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\t1qm22zo.default\\zotero\\storage\\5MZJFS3T\\391.html:}
}

@online{samsung_hell,
  title = {There is a special place for {{Samsung}} in {{Android}} hell - {{Anas Ambri}}},
  url = {http://verybadalloc.com/android/2015/12/19/special-place-for-samsung-in-android-hell/},
  abstract = {**Disclaimer**: if you are here just because you heard someone is bashing Samsung, scroll to the bottom. Also, you ca...},
  timestamp = {2016-02-24T19:40:09Z},
  urldate = {2016-02-24},
  file = {Snapshot:C\:\\Users\\Anthony\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\t1qm22zo.default\\zotero\\storage\\BJ24G3AZ\\special-place-for-samsung-in-android-hell.html:}
}



@online{Extensibility,
  title = {What is {{Extensibility}}?},
  url = {https://msdn.microsoft.com/en-us/library/aa733737(v=vs.60).aspx},
  timestamp = {2016-02-24T19:56:42Z},
  urldate = {2016-02-24},
  file = {What is Extensibility?:C\:\\Users\\Anthony\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\t1qm22zo.default\\zotero\\storage\\XA762IIJ\\aa733737(v=vs.60).html:}
}


@misc{_techniques_,
	title = {Techniques for {Fault} {Tolerance} in {Software}},
	url = {http://srel.ee.duke.edu/sw_ft/node5.html},
	urldate = {2016-03-20},
	file = {Techniques for Fault Tolerance in Software:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/2P6IMTVC/node5.html:text/html}
}

@misc{gutierrez_presenter_2016,
	title = {Presenter surviving orientation changes with {Loaders}: {Let} the {Presenter} be destroyed., {Keep} the {Presenter} somewhere and restore once the component is recreated., {A} new approach, {So} how would it look from the {Activity}/{Fragment} point of view?, {But} how do {I} get my {Presenter}? {LoaderCallbacks}, {Show} me the code},
	shorttitle = {Presenter surviving orientation changes with {Loaders}},
	url = {https://medium.com/@czyrux/presenter-surviving-orientation-changes-with-loaders-6da6d86ffbbf#.7pcjrbjle},
	abstract = {MVP (Model View Presenter) is a trending topic in the Android community nowadays. This pattern allows you to avoid the God Activity…},
	urldate = {2016-03-20},
	journal = {Medium},
	author = {Gutierrez, Antonio},
	month = mar,
	year = {2016},
	file = {Medium Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/Q87REXAG/presenter-surviving-orientation-changes-with-loaders-6da6d86ffbbf.html:text/html}
}

@misc{_debug,
	title = {Debug {GPU} {Overdraw} {Walkthrough} {\textbar} {Android} {Developers}},
	url = {http://developer.android.com/intl/es/tools/performance/debug-gpu-overdraw/index.html},
	urldate = {2016-03-20},
	file = {Debug GPU Overdraw Walkthrough | Android Developers:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/SPZRPX64/index.html:text/html}
}

@misc{dupree_rxjava,
	title = {{RxJava} for {Android} {App} {Development} - {O}'{Reilly} {Media}},
	url = {http://www.oreilly.com/programming/free/rxjava-for-android-app-development.csp},
	abstract = {RxJava is hot property among experienced Android developers these days, but this powerful library for handling asynchronous data in Android apps can be difficult to learn. In this O’Reilly report, mobile software engineer Matt Dupree introduces you...},
	urldate = {2016-03-20},
	author = {Dupree, K. Matt},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/B97CZA7K/rxjava-for-android-app-development.html:text/html}
}

@misc{_konmik/nucleus,
	title = {konmik/nucleus},
	url = {https://github.com/konmik/nucleus},
	abstract = {nucleus - Nucleus is a simple Android library, which utilizes the Model-View-Presenter pattern to properly connect background tasks with visual parts of an application.},
	urldate = {2016-03-20},
	journal = {GitHub},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/9KPBBVZV/NucleusActivity.html:text/html}
}



@misc{_performance_profiling_tools_,
	title = {Why is verbosity bad for a programming language? - {Programmers} {Stack} {Exchange}},
	shorttitle = {Why is verbosity bad for a programming language?},
	url = {http://programmers.stackexchange.com/questions/141175/why-is-verbosity-bad-for-a-programming-language},
	urldate = {2016-03-20},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/JUK39M5V/why-is-verbosity-bad-for-a-programming-language.html:text/html}
}

@misc{_performance_,
	title = {Performance {Profiling} {Tools} {\textbar} {Android} {Developers}},
	url = {http://developer.android.com/intl/es/tools/performance/index.html},
	urldate = {2016-03-20},
	file = {Performance Profiling Tools | Android Developers:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/323WE939/index.html:text/html}
}

@misc{_android_,
	title = {android - {Capturing} mobile phone traffic on wireshark - {Stack} {Overflow}},
	url = {http://stackoverflow.com/questions/9555403/capturing-mobile-phone-traffic-on-wireshark},
	urldate = {2016-03-20},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/DDPIMNES/capturing-mobile-phone-traffic-on-wireshark.html:text/html}
}

@misc{meier_first_,
	title = {First {Preview} of {Android} {N}: {Developer} {APIs} \& {Tools} {\textbar} {Android} {Developers} {Blog}},
	shorttitle = {First {Preview} of {Android} {N}},
	url = {http://android-developers.blogspot.com/2016/03/first-preview-of-android-n-developer.html},
	urldate = {2016-03-20},
	author = {Meier, Reto},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/PPSD6KK3/first-preview-of-android-n-developer.html:text/html}
}

@misc{nystrom_design_,
	title = {Design {Patterns} {Revisited} · {Game} {Programming} {Patterns}},
	url = {http://gameprogrammingpatterns.com/design-patterns-revisited.html},
	language = {English},
	urldate = {2016-02-21},
	journal = {Game Programming Patterns},
	author = {Nystrom, Bob},
	file = {Design Patterns Revisited · Game Programming Patterns:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/NVSUWJ22/design-patterns-revisited.html:text/html}
}

@misc{_write_,
	title = {Write code that is easy to delete, not easy to extend.},
	url = {http://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to},
	abstract = {“ “Every line of code is written without reason, maintained out of weakness, and deleted by chance” Jean-Paul Sartre’s Programming in ANSI C.
”
Every line of code written comes at a price:...},
	urldate = {2016-03-20},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/G43FBFK3/write-code-that-is-easy-to-delete-not-easy-to.html:text/html}
}

@misc{lowy_zen_,
	title = {The zen of software architecture},
	url = {https://www.oreilly.com/learning/zen-of-software-architecture},
	abstract = {For the beginner architect, there are many options for doing pretty much anything. But for the Master architect, there are only a few.},
	urldate = {2016-03-20},
	journal = {O'Reilly Media},
	author = {Lowy, Juval},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/5ZZU5AI9/zen-of-software-architecture.html:text/html}
}

@misc{_what_,
	title = {What is {Extensibility}?},
	url = {https://msdn.microsoft.com/en-us/library/aa733737(v=vs.60).aspx},
	urldate = {2016-03-20},
	file = {What is Extensibility?:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/SNN8AGDE/aa733737(v=vs.60).html:text/html}
}

@misc{_software_,
	title = {Software {Testability}, {Part} 1: {What} is it?},
	shorttitle = {Software {Testability}, {Part} 1},
	url = {http://robertvbinder.com/software-testability-part-1-what-is-it/},
	abstract = {First part of a talk at 2010 Google Test Automation Conference on Testability.},
	urldate = {2016-03-20},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/RKA6HDZ8/software-testability-part-1-what-is-it.html:text/html}
}

@misc{richards_software_,
	title = {Software architecture patterns},
	url = {https://www.oreilly.com/ideas/software-architecture-patterns},
	abstract = {Take a deep dive into several common software architecture patterns},
	urldate = {2016-03-20},
	journal = {O'Reilly Media},
	author = {Richards, Mark},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/ZQWM9DVI/software-architecture-patterns.html:text/html}
}

@misc{_dahnielson_,
	title = {Dahnielson {\textbar} {Misleading} the public since 1979},
	url = {http://en.dahnielson.com/},
	urldate = {2016-03-20},
	file = {Dahnielson | Misleading the public since 1979:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/QH4XFF4C/en.dahnielson.com.html:text/html}
}

@misc{google_developers_dagger_2014,
	title = {{DAGGER} 2 - {A} {New} {Type} of dependency injection},
	url = {https://www.youtube.com/watch?v=oK_XtfXPkqw},
	abstract = {The best classes in any Java application are the ones that do stuff,
e.g., the BarcodeDecoder, the KoopaPhysicsEngine, the AudioStreamer, etc. These classes all have dependencies; perhaps a BarcodeCameraFinder, DefaultPhysicsEngine, and an HttpStreamer.  In contrast, the worst classes in any application are the ones that take up space without doing much at all, e.g., the BarcodeDecoderFactory, the CameraServiceLoader, and the MutableContextWrapper. These classes are the clumsy duct tape that wires the interesting stuff together.

Dagger is a very fast and simple replacement for these FactoryFactory
classes. It allows you to focus on the interesting classes.  You just simply declare dependencies, specify how to satisfy them, and ship your app.

Dagger is a joint effort between Google and Square with some individual contributors from other places such as Netflix.  It is descended conceptually from another project used widely within Google called Guice, which despite its popularity was not without issues.

This is the story of another small group of engineers attempting to evolve and improve DI forward yet again with Dagger: a dramatically different reimplementation using generated code.},
	urldate = {2016-03-20},
	author = {{Google Developers}},
	month = aug,
	year = {2014},
	keywords = {Dagger2, fullname: other, GDS: Full Production, java, live, Location: other, NYC, petele, product: other, Team: Other, Type: Live Event}
}

@misc{c._martin_confreaks_,
	title = {Confreaks {TV} {\textbar} {Keynote}: {Architecture} the {Lost} {Years} - {Ruby} {Midwest} 2011},
	url = {http://confreaks.tv/videos/rubymidwest2011-keynote-architecture-the-lost-years},
	urldate = {2016-03-20},
	author = {C. Martin, Robert},
	file = {Confreaks TV | Keynote\: Architecture the Lost Years - Ruby Midwest 2011:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/3Z3CA938/rubymidwest2011-keynote-architecture-the-lost-years.html:text/html}
}

@misc{_marshmallow_,
	title = {Marshmallow {Brings} {Data} {Bindings} to {Android}, with {Yigit} {Boyar} and {George} {Mount}},
	url = {https://realm.io/news/data-binding-android-boyar-mount/},
	abstract = {Yigit Boyar and George Mount of Google developed Android’s Data Binding Library to allow developers to build rich \& responsive user experiences with minimal effort. In this talk at the Bay Area Android Developer Group, they demonstrate how using Data Bindings can improve your application by removing boilerplate for data-driven UI, allowing you to write cleaner, better code. Get it straight from the horse’s mouth: Step one: use Data Binding in Android. Step two: profit. 💰},
	urldate = {2016-03-20},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/9SNUK62K/data-binding-android-boyar-mount.html:text/html}
}

@misc{_mvp_2014,
	title = {{MVP} for {Android}: how to organize the presentation layer},
	shorttitle = {{MVP} for {Android}},
	url = {http://antonioleiva.com/mvp-android/},
	abstract = {MVP (Model-View-Presenter) is a software design pattern that works pretty well in Android projects and helps separate presentation layer from domain.},
	urldate = {2016-03-20},
	journal = {Antonio Leiva},
	month = apr,
	year = {2014},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/T22NTP7B/mvp-android.html:text/html}
}

@misc{_robolectric_stackoverflow,
	title = {Robolectric vs {Android} {Test} {Framework} - {Stack} {Overflow}},
	url = {http://stackoverflow.com/questions/18271474/robolectric-vs-android-test-framework},
	urldate = {2016-03-20},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/QF8X62ZI/robolectric-vs-android-test-framework.html:text/html}
}

@misc{_robolectric_,
	title = {Robolectric},
	url = {http://robolectric.org/},
	urldate = {2016-03-20},
	file = {Robolectric:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/R52GGJ7G/robolectric.org.html:text/html}
}

@misc{evans_tcpdump,
	title = {tcpdump is amazing - {Julia} {Evans}},
	url = {http://jvns.ca/blog/2016/03/16/tcpdump-is-amazing/},
	urldate = {2016-03-20},
	author = {Evans, Julia},
	file = {tcpdump is amazing - Julia Evans:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/PNMA3P6H/tcpdump-is-amazing.html:text/html}
}

@misc{flux,
	title = {Flux {\textbar} {Application} {Architecture} for {Building} {User} {Interfaces}},
	url = {http://facebook.github.io/flux/index.html},
	abstract = {Application Architecture for Building User Interfaces},
	urldate = {2016-03-20},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/R74BD77E/overview.html:text/html}
}


@misc{mvvm,
	title = {The {MVVM} {Pattern}},
	url = {https://msdn.microsoft.com/en-us/library/hh848246.aspx},
	urldate = {2016-03-20},
	file = {The MVVM Pattern:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/HDTG9BZQ/hh848246.html:text/html}
}


@misc{reactivex,
	title = {{ReactiveX} - {Operators}},
	url = {http://reactivex.io/documentation/operators.html#alphabetical},
	urldate = {2016-03-20},
	file = {ReactiveX - Operators:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/DAMCUD5B/operators.html:text/html}
}


@misc{square/mortar,
	title = {square/mortar},
	url = {https://github.com/square/mortar},
	abstract = {mortar - A simple library that makes it easy to pair thin views with dedicated controllers, isolated from most of the vagaries of the Activity life cycle.},
	urldate = {2016-03-20},
	journal = {GitHub},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/Z236FJJ2/mortar.html:text/html}
}


@misc{advocating,
	title = {Advocating {Against} {Android} {Fragments}},
	url = {https://corner.squareup.com/2014/10/advocating-against-android-fragments.html},
	urldate = {2016-03-20},
	file = {Advocating Against Android Fragments:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/TTWDQ3T6/advocating-against-android-fragments.html:text/html}
}


@misc{dagger_github,
	title = {Dagger ‡ {A} fast dependency injector for {Android} and {Java}.},
	url = {http://google.github.io/dagger/},
	urldate = {2016-03-20},
	file = {Dagger ‡ A fast dependency injector for Android and Java.:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/4KKCHSTF/dagger.html:text/html}
}


@book{gamma_design_1994,
	address = {Reading, Mass},
	edition = {1 edition},
	title = {Design {Patterns}: {Elements} of {Reusable} {Object}-{Oriented} {Software}},
	isbn = {978-0-201-63361-0},
	shorttitle = {Design {Patterns}},
	abstract = {These texts cover the design of object-oriented software and examine how to investigate requirements, create solutions and then translate designs into code, showing developers how to make practical use of the most significant recent developments. A summary of UML notation is included.},
	language = {English},
	publisher = {Addison-Wesley Professional},
	author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John and Booch, Grady},
	month = nov,
	year = {1994}
}


@incollection{ferreira_understanding_2011,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Understanding {Human}-{Smartphone} {Concerns}: {A} {Study} of {Battery} {Life}},
	copyright = {©2011 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-642-21725-8 978-3-642-21726-5},
	shorttitle = {Understanding {Human}-{Smartphone} {Concerns}},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-21726-5_2},
	abstract = {This paper presents a large, 4-week study of more than 4000 people to assess their smartphone charging habits to identify timeslots suitable for opportunistic data uploading and power intensive operations on such devices, as well as opportunities to provide interventions to support better charging behavior. The paper provides an overview of our study and how it was conducted using an online appstore as a software deployment mechanism, and what battery information was collected. We then describe how people charge their smartphones, the implications on battery life and energy usage, and discuss how to improve users’ experience with battery life.},
	language = {en},
	number = {6696},
	urldate = {2016-03-20},
	booktitle = {Pervasive {Computing}},
	publisher = {Springer Berlin Heidelberg},
	author = {Ferreira, Denzil and Dey, Anind K. and Kostakos, Vassilis},
	editor = {Lyons, Kent and Hightower, Jeffrey and Huang, Elaine M.},
	month = jun,
	year = {2011},
	note = {DOI: 10.1007/978-3-642-21726-5\_2},
	keywords = {android, autonomous logging, battery life, Computer Communication Networks, Information Storage and Retrieval, Information Systems Applications (incl. Internet), Large-scale study, smartphones, Software Engineering, User Interfaces and Human Computer Interaction},
	pages = {19--33},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/W2BHFS5F/978-3-642-21726-5_2.html:text/html}
}


@misc{_data_binding,
	title = {Data {Binding} {Guide} {\textbar} {Android} {Developers}},
	url = {https://developer.android.com/intl/es/tools/data-binding/guide.html},
	urldate = {2016-03-20},
	file = {Data Binding Guide | Android Developers:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/DHCA3IIF/guide.html:text/html}
}

@misc{sandin_four_2016,
	title = {Four {Strategies} for {Organizing} {Code}: {The} {Whys} and {Whats} of {Organizing} {Code}, {Strategy} \#1 — by {Component}, {Strategy} \#2 — by {Toolbox}, {Strategy} \#3 — by {Layer}, {Strategy} \#4 — by {Kind}, {Summary}},
	shorttitle = {Four {Strategies} for {Organizing} {Code}},
	url = {https://medium.com/@msandin/strategies-for-organizing-code-2c9d690b6f33#.1jnehhnec},
	abstract = {This article outlines four different strategies for organizing code: by component, by toolbox, by layer, and by kind. I think these four…},
	urldate = {2016-03-20},
	journal = {Medium},
	author = {Sandin, Martin},
	month = feb,
	year = {2016},
	file = {Medium Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/6KZQ5FNB/strategies-for-organizing-code-2c9d690b6f33.html:text/html}
}

@misc{_facebook_infoq,
	title = {Facebook: {MVC} {Does} {Not} {Scale}, {Use} {Flux} {Instead} [{Updated}]},
	shorttitle = {Facebook},
	url = {http://www.infoq.com/news/2014/05/facebook-mvc-flux#anch110016},
	abstract = {This article has been updated based on community and Jing Chen (Facebook)’s reaction. (See the Update section below.)
Facebook came to the conclusion that MVC does not scale up for their needs and has decided to use a different pattern instead: Flux.},
	urldate = {2016-03-20},
	journal = {InfoQ},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/K4HQDT6V/facebook-mvc-flux.html:text/html}
}

@misc{_design_spaghetti,
	title = {Design {Patterns} and {Refactoring}},
	url = {/},
	abstract = {Design Patterns and Refactoring articles and guides. Design Patterns video tutorials for newbies. Simple descriptions and full source code examples in Java, C++, C\#, PHP and Delphi.},
	urldate = {2016-03-20},
	file = {Snapshot:/home/anthony/.mozilla/firefox/ad5p4mgw.default-1438261039582/zotero/storage/X6MH5FD7/spaghetti-code.html:text/html}
}
